{"version":3,"sources":["components/TutorialHeader/TutorialHeader.js","components/TutorialHeader/index.js","content/LandingPage/LandingPage.js","content/LandingPage/index.js","content/RepoPage/RepoPage.js","content/RepoPage/index.js","App.js","serviceWorker.js","index.js"],"names":["TutorialHeader","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","aria-label","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","to","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","LandingPage","RepoPage","App","Component","Content","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAkEeA,ICjEAA,EDuBQ,IACnB,cAACC,EAAA,EAAD,CACIC,OAAQ,EAAGC,oBAAmBC,0BAC1B,eAACC,EAAA,EAAD,CAAQC,aAAW,kBAAnB,UACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACIF,aAAW,YACXG,QAASL,EACTM,SAAUP,IAEd,cAACQ,EAAA,EAAD,CAAYC,QAASC,IAAMC,GAAG,IAAIC,OAAO,MAAzC,6BAGA,cAACC,EAAA,EAAD,CAAkBV,aAAW,kBAA7B,SACA,cAACW,EAAA,EAAD,CAAgBL,QAASC,IAAMC,GAAG,SAAlC,4BAEA,cAACI,EAAA,EAAD,CACIZ,aAAW,kBACXa,SAAUhB,EACViB,cAAc,EAHlB,SAII,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACA,cAACL,EAAA,EAAD,CAAgBL,QAASC,IAAMC,GAAG,SAAlC,gCAIR,eAACS,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAoBlB,aAAW,gBAA/B,SACI,cAAC,IAAD,MAEJ,cAACkB,EAAA,EAAD,CAAoBlB,aAAW,cAA/B,SACI,cAAC,IAAD,MAEJ,cAACkB,EAAA,EAAD,CAAoBlB,aAAW,eAA/B,SACI,cAAC,IAAD,c,QEpDTmB,ICLAA,EDCK,IACX,+CEGMC,ICLAA,EDCE,IACR,4CEKT,MAAMC,UAAYC,YAChB1B,SACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC2B,EAAA,EAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,cAAC,IAAD,CAAOM,KAAK,SAASC,UAAWN,aAQ7BC,QCZKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASpC,OACL,cAAC,IAAD,UACE,cAAC,EAAD,MAEFqC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAKC,IACjCA,EAAaC,kB","file":"static/js/main.e9762345.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Header,\r\n    HeaderContainer,\r\n    HeaderName,\r\n    HeaderNavigation,\r\n    HeaderMenuButton,\r\n    HeaderMenuItem,\r\n    HeaderGlobalBar,\r\n    HeaderGlobalAction,\r\n    SkipToContent,\r\n    SideNav,\r\n    SideNavItems,\r\n    HeaderSideNavItems,\r\n} from 'carbon-components-react';\r\n\r\nimport {\r\n    AppSwitcher20,\r\n    Notification20,\r\n    UserAvatar20,\r\n} from '@carbon/icons-react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TutorialHeader = () => (\r\n    <HeaderContainer\r\n        render={({ isSideNavExpanded, onClickSideNavExpand }) => (\r\n            <Header aria-label=\"Carbon Tutorial\">\r\n                <SkipToContent />\r\n                <HeaderMenuButton\r\n                    aria-label=\"Open menu\"\r\n                    onClick={onClickSideNavExpand}\r\n                    isActive={isSideNavExpanded}\r\n                />\r\n                <HeaderName element={Link} to=\"/\" prefix=\"IBM\">\r\n                    Carbon Tutorial\r\n                </HeaderName>\r\n                <HeaderNavigation aria-label=\"Carbon Tutorial\">\r\n                <HeaderMenuItem element={Link} to=\"/repos\">Repositories</HeaderMenuItem>\r\n                </HeaderNavigation>\r\n                <SideNav\r\n                    aria-label=\"Side navigation\"\r\n                    expanded={isSideNavExpanded}\r\n                    isPersistent={false}>\r\n                    <SideNavItems>\r\n                        <HeaderSideNavItems>\r\n                        <HeaderMenuItem element={Link} to=\"/repos\">Repositories</HeaderMenuItem>\r\n                        </HeaderSideNavItems>\r\n                    </SideNavItems>\r\n                </SideNav>\r\n                <HeaderGlobalBar>\r\n                    <HeaderGlobalAction aria-label=\"Notifications\">\r\n                        <Notification20 />\r\n                    </HeaderGlobalAction>\r\n                    <HeaderGlobalAction aria-label=\"User Avatar\">\r\n                        <UserAvatar20 />\r\n                    </HeaderGlobalAction>\r\n                    <HeaderGlobalAction aria-label=\"App Switcher\">\r\n                        <AppSwitcher20 />\r\n                    </HeaderGlobalAction>\r\n                </HeaderGlobalBar>\r\n            </Header>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default TutorialHeader;","import TutorialHeader from './TutorialHeader';\r\nexport default TutorialHeader;","import React from 'react';\r\n\r\nconst LandingPage = () => {\r\n  return <div>LANDING PAGE</div>;\r\n};\r\n\r\nexport default LandingPage;","import LandingPage from './LandingPage';\r\nexport default LandingPage;","import React from 'react';\r\n\r\nconst RepoPage = () => {\r\n  return <div>REPO PAGE</div>;\r\n};\r\n\r\nexport default RepoPage;","import RepoPage from './RepoPage';\r\nexport default RepoPage;","import React, { Component } from 'react';\r\nimport './app.scss';\r\nimport { Button, Content } from 'carbon-components-react';\r\nimport TutorialHeader from './components/TutorialHeader';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport LandingPage from './content/LandingPage';\r\nimport RepoPage from './content/RepoPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TutorialHeader />\r\n        <Content>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={LandingPage} />\r\n            <Route path=\"/repos\" component={RepoPage} />\r\n          </Switch>\r\n        </Content>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router>\r\n      <App />\r\n    </Router>,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}